@startuml "formula"
interface Function{
    +accepts(Visitor visitor): T
}

class Add implements Function{
    -right: Function
    -left: Function
    +accepts(Visitor visitor): T
}

class Subtract implements Function{
    -right: Function
    -left: Function
    +accepts(Visitor visitor): T
}

class Multiply implements Function{
    -right: Function
    -left: Function
    +accepts(Visitor visitor): T
}

class Divide implements Function{
    -right: Function
    -left: Function
    +accepts(Visitor visitor): T
}

class Power implements Function{
    -base: Function
    -p: Function
    +accepts(Visitor visitor): T
}

class Root implements Function{
    -base: Function
    -p: Function
    +accepts(Visitor visitor): T
}

class Module implements Function{
    -function: Function
    +accepts(Visitor visitor): T
}

class Number implements Function{
    +abstract accepts(numberVisitor: NumberVisitor, other: Number): Result<Number>
    +abstract acceptsAux(numberVisitor: NumberVisitor, other: ByteNumber): Result<Number>
    +abstract acceptsAux(numberVisitor: NumberVisitor, other: IntNumber): Result<Number>
    +abstract acceptsAux(numberVisitor: NumberVisitor, other: LongNumber): Result<Number>
    +abstract acceptsAux(numberVisitor: NumberVisitor, other: DoubleNumber): Result<Number>
}

class ByteNumber extends Number{
    +value: Byte

    +accepts(visitor: Visitor<T>): Result<T>
    +accepts(numberVisitor: NumberVisitor, other: Number): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: ByteNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: IntNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: LongNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: DoubleNumber): Result<Number>
}

class IntNumber extends Number{
    +value: Int

    +accepts(visitor: Visitor<T>): Result<T>
    +accepts(numberVisitor: NumberVisitor, other: Number): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: ByteNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: IntNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: LongNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: DoubleNumber): Result<Number>
}

class LongNumber extends Number{
    +value: Long

    +accepts(visitor: Visitor<T>): Result<T>
    +accepts(numberVisitor: NumberVisitor, other: Number): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: ByteNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: IntNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: LongNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: DoubleNumber): Result<Number>
}

class DoubleNumber extends Number{
    +value: Double

    +accepts(visitor: Visitor<T>): Result<T>
    +accepts(numberVisitor: NumberVisitor, other: Number): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: ByteNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: IntNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: LongNumber): Result<Number>
    +acceptsAux(numberVisitor: NumberVisitor, other: DoubleNumber): Result<Number>
}



class Variable implements Function{
    -variable: String
    +accepts(Visitor visitor): T
}

interface Visitor{
    +visit(Add add): T
    +visit(Subtract subtract): Optional<T>
    +visit(Multiply multiply): Optional<T>
    +visit(Divide divide): Optional<T>
    +visit(Power power): Optional<T>
    +visit(Root root): Optional<T>
    +visit(Module module): Optional<T>
    +visit(Number number): Optional<T>
    +visit(Variable variable): Optional<T>
    +process(Function function): Optional<T>
}

class Printer implements Visitor{
    +visit(Add add): Optional<String>
    +visit(Subtract subtract): Optional<String>
    +visit(Multiply multiply): Optional<String>
    +visit(Divide divide): Optional<String>
    +visit(Power power): Optional<String>
    +visit(Root root): Optional<String>
    +visit(Module module): Optional<String>
    +visit(Number number): Optional<String>
    +visit(Variable variable): Optional<String>
    +process(Function function): Optional<String>
}

class Evaluator implements Visitor{
    +addVisitor: NumberVisitor
    +multiVisitor: NumberVisitor

    +visit(Add add): Optional<Number>
    +visit(Subtract subtract): Optional<Number>
    +visit(Multiply multiply): Optional<Number>
    +visit(Divide divide): Optional<Number>
    +visit(Power power): Optional<Number>
    +visit(Root root): Optional<Number>
    +visit(Module module): Optional<Number>
    +visit(Number number): Optional<Number>
    +visit(Variable variable): Optional<Number>
    +process(Function function): Optional<Number>
}

class EvaluatorWithVariables implements Visitor{
    +addVisitor: NumberVisitor
    +multiVisitor: NumberVisitor
    +variablesValues: Map<String, Number>

    +visit(Add add): Optional<Number>
    +visit(Subtract subtract): Optional<Number>
    +visit(Multiply multiply): Optional<Number>
    +visit(Divide divide): Optional<Number>
    +visit(Power power): Optional<Number>
    +visit(Root root): Optional<Number>
    +visit(Module module): Optional<Number>>
    +visit(Number number): Optional<Number>
    +visit(Variable variable): Optional<Number>
    +process(Function function): Optional<Number>
}

interface NumberVisitor{
    +visit(byte: ByteNumber, other: ByteNumber): Result<Number>
    +visit(byte: ByteNumber, other: IntNumber): Result<Number>
    +visit(byte: ByteNumber, other: LongNumber): Result<Number>
    +visit(byte: ByteNumber, other: DoubleNumber): Result<Number>


    +visit(int: IntNumber, other: ByteNumber): Result<Number>
    +visit(int: IntNumber, other: IntNumber): Result<Number>
    +visit(int: IntNumber, other: LongNumber): Result<Number>
    +visit(int: IntNumber, other: DoubleNumber): Result<Number>


    +visit(long: LongNumber, other: ByteNumber): Result<Number>
    +visit(long: LongNumber, other: IntNumber): Result<Number>
    +visit(long: LongNumber, other: LongNumber): Result<Number>
    +visit(long: LongNumber, other: DoubleNumber): Result<Number>


    +visit(double: DoubleNumber, other: ByteNumber): Result<Number>
    +visit(double: DoubleNumber, other: IntNumber): Result<Number>
    +visit(double: DoubleNumber, other: DoubleNumber): Result<Number>
    +visit(double: DoubleNumber, other: LongNumber): Result<Number>


    +process(number: Number, other: Number): Result<Number>
}

class AddNumbersVisitor implements NumberVisitor{
    +visit(byte: ByteNumber, other: ByteNumber): Result<Number>
    +visit(byte: ByteNumber, other: IntNumber): Result<Number>
    +visit(byte: ByteNumber, other: LongNumber): Result<Number>
    +visit(byte: ByteNumber, other: DoubleNumber): Result<Number>


    +visit(int: IntNumber, other: ByteNumber): Result<Number>
    +visit(int: IntNumber, other: IntNumber): Result<Number>
    +visit(int: IntNumber, other: LongNumber): Result<Number>
    +visit(int: IntNumber, other: DoubleNumber): Result<Number>


    +visit(long: LongNumber, other: ByteNumber): Result<Number>
    +visit(long: LongNumber, other: IntNumber): Result<Number>
    +visit(long: LongNumber, other: LongNumber): Result<Number>
    +visit(long: LongNumber, other: DoubleNumber): Result<Number>


    +visit(double: DoubleNumber, other: ByteNumber): Result<Number>
    +visit(double: DoubleNumber, other: IntNumber): Result<Number>
    +visit(double: DoubleNumber, other: DoubleNumber): Result<Number>
    +visit(double: DoubleNumber, other: LongNumber): Result<Number>


    +process(number: Number, other: Number): Result<Number>
}

class MultiplyNumbersVisitor implements NumberVisitor{
    +visit(byte: ByteNumber, other: ByteNumber): Result<Number>
    +visit(byte: ByteNumber, other: IntNumber): Result<Number>
    +visit(byte: ByteNumber, other: LongNumber): Result<Number>
    +visit(byte: ByteNumber, other: DoubleNumber): Result<Number>


    +visit(int: IntNumber, other: ByteNumber): Result<Number>
    +visit(int: IntNumber, other: IntNumber): Result<Number>
    +visit(int: IntNumber, other: LongNumber): Result<Number>
    +visit(int: IntNumber, other: DoubleNumber): Result<Number>


    +visit(long: LongNumber, other: ByteNumber): Result<Number>
    +visit(long: LongNumber, other: IntNumber): Result<Number>
    +visit(long: LongNumber, other: LongNumber): Result<Number>
    +visit(long: LongNumber, other: DoubleNumber): Result<Number>


    +visit(double: DoubleNumber, other: ByteNumber): Result<Number>
    +visit(double: DoubleNumber, other: IntNumber): Result<Number>
    +visit(double: DoubleNumber, other: DoubleNumber): Result<Number>
    +visit(double: DoubleNumber, other: LongNumber): Result<Number>


    +process(number: Number, other: Number): Result<Number>
}
@enduml